m <- c("matrix", m, "end;")
x
x <- list(rna16S = ips.16S[1:5, 1:20],
rna28S = ips.28S[1:5, 1:20])
write.nex(x)
x <- list(rna16S = ips.16S[1:5, 1:20],
rna28S = ips.28S[1:5, 1:20])
if ( !is.list(x) ) x <- list(x)
## data types of partitions
datatype <- sapply(x, class)
datatype[datatype == "DNAbin"] <- "dna"
datatype[datatype == "dist"] <- "distances"
datatype[datatype == "data.frame"] <- "standard"
m <- function(x) ifelse(as.raw(2) %in% x, "?", "N")
p <- cbind(rep(1, length(x)), sapply(x, ncol))
for ( i in 2:nrow(p) ){
p[i, 1] <- p[i - 1, 2] + 1
p[i, 2] <- p[i, 1] + p[i, 2] -1
}
info <- data.frame(datatype = datatype,
missing = sapply(x, m),
length = sapply(x, ncol),
p)
names(info)[4:5] <- c("from", "to")
info
x <- do.call(cbind.DNAbin, c(x, fill.with.gaps = TRUE))
ntax <- (nrow(x))
nchar <- sum(info$length)
#   if ( datatype == "distances" ){
#     ntax <- attr(x, "Size")
#     taxnames <- labels(x)
#   } else {
#     ntax <- nrow(x)
#   }
## assemble NEXUS file
## -------------------
nex <- c(
"#NEXUS",
paste("\n[created by ips on ",
date(), "]\n", sep = ""))
# TAXA BLOCK (optional)
# ---------------------
if ( taxblock ){
nex <- c(
nex,
"begin taxa;",
paste("\tdimensions ntax=", ntax,";", sep = ""),
"\ttaxlabels",
paste("\t", rownames(x), sep = ""), ";\n"
)
}
## adding whitespace to taxonnames to
## get equal string lengths
## ------------------------
ws <- nchar(rownames(x))
ws <- max(ws) - ws
ws <- lapply(ws, function(x) paste(rep(" ", x),
collapse = ""))
rownames(x) <- paste(rownames(x), ws, sep = "")
if ( is.numeric(block.width ) ){
interleave <- " interleave"
} else {
interleave <- ifelse(nrow(info) > 1, " interleave", "")
block.width <- NULL
}
m <- vector("list", nrow(info))
for ( i in seq_along(m) ){
mm <- x[, info[i, "from"]:info[i, "to"]]
if ( is.null(block.width) ){
bw <- ncol(mm)
} else {
bw <- block.width
}
m[[i]] <- c(paste("[", rownames(info)[i], "]", sep = ""),
matrixBlock(mm, bw))
}
m <- unlist(m)
m[length(m)] <- paste(m[length(m)], ";", sep = "")
m <- c("matrix", m, "end;")
# write DATA BLOCK
# -----------------
#   if ( datatype == "dna" || datatype == "standard" ){
#     if ( datatype == "standard" && !identical(x[1, 1], round(x[1, 1])) )
#       datatype <- "continuous"
#     if ( !datatype == "standard" ){
#       dt <- datatype
unique(info$datatype)
paste("\tformat datatype=", unique(info$datatype),
" missing=", missing,
" gap=-", interleave, ";", sep = "")
source('~/r/pkgs/ips/R/write.nex.R')
nex <- c(
nex,
paste("begin", ifelse(taxblock, "characters;", "data;")),
paste("\tdimensions ntax=", ntax,
" nchar=", nchar, ";", sep = ""),
paste("\tformat datatype=", unique(info$datatype),
" missing=", unique(info$missing),
" gap=-", interleave, ";", sep = ""),
m
)
nex
x <- list(rna16S = ips.16S[1:5, 1:20],
rna28S = ips.28S[1:5, 1:20])
write.nex(x)
write.nex(x, block.width = 20)
write.nex(x, block.width = 10)
source('~/r/pkgs/ips/R/write.nex.R')
source('~/r/pkgs/ips/R/write.nex.R')
x <- list(rna16S = ips.16S[1:5, 1:20],
rna28S = ips.28S[1:5, 1:20])
write.nex(x, block.width = 10)
write.nex(x, block.width = 20)
x
if ( !is.list(x) ) x <- list(x)
## data types of partitions
datatype <- sapply(x, class)
datatype[datatype == "DNAbin"] <- "dna"
datatype[datatype == "dist"] <- "distances"
datatype[datatype == "data.frame"] <- "standard"
m <- function(x) ifelse(as.raw(2) %in% x, "?", "N")
p <- cbind(rep(1, length(x)), sapply(x, ncol))
for ( i in 2:nrow(p) ){
p[i, 1] <- p[i - 1, 2] + 1
p[i, 2] <- p[i, 1] + p[i, 2] -1
}
info <- data.frame(datatype = datatype,
missing = sapply(x, m),
length = sapply(x, ncol),
p)
names(info)[4:5] <- c("from", "to")
x <- do.call(cbind.DNAbin, c(x, fill.with.gaps = TRUE))
ntax <- (nrow(x))
nchar <- sum(info$length)
#   if ( datatype == "distances" ){
#     ntax <- attr(x, "Size")
#     taxnames <- labels(x)
#   } else {
#     ntax <- nrow(x)
#   }
## assemble NEXUS file
## -------------------
nex <- c(
"#NEXUS",
paste("\n[created by ips on ",
date(), "]\n", sep = ""))
# TAXA BLOCK (optional)
# ---------------------
if ( taxblock ){
nex <- c(
nex,
"begin taxa;",
paste("\tdimensions ntax=", ntax,";", sep = ""),
"\ttaxlabels",
paste("\t", rownames(x), sep = ""), ";\n"
)
}
## adding whitespace to taxonnames to
## get equal string lengths
## ------------------------
ws <- nchar(rownames(x))
ws <- max(ws) - ws
ws <- lapply(ws, function(x) paste(rep(" ", x),
collapse = ""))
rownames(x) <- paste(rownames(x), ws, sep = "")
if ( is.numeric(block.width ) ){
interleave <- " interleave"
} else {
interleave <- ifelse(nrow(info) > 1, " interleave", "")
block.width <- NULL
}
m <- vector("list", nrow(info))
i <- 1
mm <- x[, info[i, "from"]:info[i, "from"]]
mm <- x[, info$from[i]:info$to[i]]
mm
source('~/r/pkgs/ips/R/write.nex.R')
x <- list(rna16S = ips.16S[1:5, 1:10],
rna28S = ips.28S[1:5, 1:30])
write.nex(x, block.width = 20)
write.fas(ips.16S[1:5, 1:20], interleave = 5)
write.fas(ips.16S[1:5, 1:120], interleave = 60)
write.phy(ips.16S[1:5, 1:20], interleave = 40)
x <- list(rna16S = ips.16S[1:5, 1:10],
rna28S = ips.28S[1:5, 1:30])
write.nex(x, block.width = 20)
write.phy(ips.16S[1:5, 1:20], interleave = 40)
source('~/r/pkgs/ips/R/write.phy.R')
write.phy(ips.16S[1:5, 1:20], interleave = 40)
write.phy(ips.16S[1:5, 1:20], block.width = 40)
write.nex(ips.28S[1:5, 1:30], block.width = 20)
ips.28S[1:5, 1:30]
x <- ips.28S[1:5, 1:30]
if ( !is.list(x) ) x <- list(x)
## data types of partitions
datatype <- sapply(x, class)
datatype[datatype == "DNAbin"] <- "dna"
datatype[datatype == "dist"] <- "distances"
datatype[datatype == "data.frame"] <- "standard"
m <- function(x) ifelse(as.raw(2) %in% x, "?", "N")
p <- cbind(rep(1, length(x)), sapply(x, ncol))
for ( i in 2:nrow(p) ){
p[i, 1] <- p[i - 1, 2] + 1
p[i, 2] <- p[i, 1] + p[i, 2] -1
}
p <- cbind(rep(1, length(x)), sapply(x, ncol))
p
info <- data.frame(datatype = datatype,
missing = sapply(x, m),
length = sapply(x, ncol),
p)
names(info)[4:5] <- c("from", "to")
info
p <- cbind(rep(1, length(x)), sapply(x, ncol))
if ( nrow(p) > 1 ) {
for ( i in 2:nrow(p) ){
p[i, 1] <- p[i - 1, 2] + 1
p[i, 2] <- p[i, 1] + p[i, 2] -1
}
}
x <- do.call(cbind.DNAbin, c(x, fill.with.gaps = TRUE))
ntax <- (nrow(x))
nchar <- sum(info$length)
nex <- c(
"#NEXUS",
paste("\n[created by ips on ",
date(), "]\n", sep = ""))
# TAXA BLOCK (optional)
# ---------------------
if ( taxblock ){
nex <- c(
nex,
"begin taxa;",
paste("\tdimensions ntax=", ntax,";", sep = ""),
"\ttaxlabels",
paste("\t", rownames(x), sep = ""), ";\n"
)
}
ws <- nchar(rownames(x))
ws <- max(ws) - ws
ws <- lapply(ws, function(x) paste(rep(" ", x),
collapse = ""))
rownames(x) <- paste(rownames(x), ws, sep = "")
block.width = 20
if ( is.numeric(block.width ) ){
interleave <- " interleave"
} else {
interleave <- ifelse(nrow(info) > 1, " interleave", "")
block.width <- NULL
}
m <- vector("list", nrow(info))
for ( i in seq_along(m) ){
mm <- x[, info$from[i]:info$to[i]]
if ( is.null(block.width) ){
bw <- ncol(mm)
} else {
bw <- block.width
}
cmt <- paste("[Position ", info$from[i], "-", info$to[i], ": ",
rownames(info)[i], " (", info$length[i], "bp)]", sep = "")
m[[i]] <- c(cmt, matrixBlock(mm, bw))
}
m
source('~/r/pkgs/ips/R/write.nex.R')
x <- ips.28S[1:5, 1:30]
write.nex(x, block.width = 20)
write.nex(x, block.width = 30)
x <- list(rna16S = ips.16S[1:5, 1:10],
rna28S = ips.28S[1:5, 1:30])
write.nex(x, block.width = 20)
library(ips)
?read.nex
## bark beetle COX1 sequences
## --------------------------
data(ips.cox1)
## create temporary file names
## ---------------------------
format <- c(".fas", ".phy", ".nex")
fn <- sapply(format, tempfile,
pattern = "ips", tmpdir = tempdir())
## write sequences files
## ---------------------
write.fas(ips.cox1, fn[".fas"])
write.phy(ips.cox1, fn[".phy"])
write.nex(ips.cox1, fn[".nex"])
fas <- read.fas(fn[".fas"])
phy <- read.phy(fn[".phy"])
nex <- read.nex(fn[".nex"])
x <- fn[".nex"]
x
x <- scan(x, what = "c", quiet = TRUE)
x
fas <- read.fas(fn[".fas"])
phy <- read.phy(fn[".phy"])
nex <- read.nex(fn[".nex"])
## bark beetle COX1 sequences
## --------------------------
data(ips.cox1)
## create temporary file names
## ---------------------------
format <- c(".fas", ".phy", ".nex")
fn <- sapply(format, tempfile,
pattern = "ips", tmpdir = tempdir())
## write sequences files
## ---------------------
write.fas(ips.cox1, fn[".fas"])
write.phy(ips.cox1, fn[".phy"])
write.nex(ips.cox1[1:2, 1:20], fn[".nex"])
nex <- read.nex(fn[".nex"])
nex
unlink(fn)
data(ips.cox1)
## create temporary file names
## ---------------------------
format <- c(".fas", ".phy", ".nex")
fn <- sapply(format, tempfile,
pattern = "ips", tmpdir = tempdir())
write.nex(ips.cox1, fn[".nex"])
nex <- read.nex(fn[".nex"])
ips.cox1
head(write.nex)
write.nex(ips.cox1[1:5, 1:60], fn[".nex"])
nex <- read.nex(fn[".nex"])
write.nex(ips.cox1[1:5, 1:59], fn[".nex"])
nex <- read.nex(fn[".nex"])
x <- fn[".nex"]
x <- scan(x, what = "c", quiet = TRUE)
## eliminate comments
## ------------------
left <- grep("\\[", x)
right <- grep("\\]", x)
left
right
x[left:right]
left <- grep("[[]", x)
left
right <- grep("[]]", x)
right
length(left) > 0 & length(right) > 0
cbind(left, right)
x
m <- cbind(left, right)
x <- x[-unlist(apply(m, 1, function(x) x[1]:x[2]))]
x
x <- x[x != ""]
x[grep("ntax", x, ignore.case = TRUE)]
ntax <- x[grep("ntax", x, ignore.case = TRUE)]
gsub("[[:alpha:]]|[[:punct:]]", "", ntax )
ntax <- gsub("[[:alpha:]]|[[:punct:]]", "", ntax )
nb <- ntax <- as.numeric(unique(ntax))
ncha <- x[grep("nchar", x, ignore.case = TRUE)]
ncha <- gsub("[[:alpha:]]|[[:punct:]]", "", ncha )
ncha <- as.numeric(unique(ncha))
start <- grep("^\t?matrix$", x, ignore.case = TRUE)
end <- grep(";", x)
end <- min(end[end > start])
M <- x[(start + 1):(end - 1)]
M
start <- grep("^\t?matrix$", x, ignore.case = TRUE)
x[start]
x[end]
source('~/r/pkgs/ips/R/write.nex.R')
write.nex(ips.cox1[1:5, 1:59], fn[".nex"])
x <- fn[".nex"]
nex <- read.nex(x)
nex
write.nex(ips.cox1[1:5, 1:60], fn[".nex"])
nex <- read.nex(x)
nex
data(ips.16S)
x <- list(ips.cox1, ips.16S)
x
write.nex(x, fn[".nex"])
x <- fn[".nex"]
nex <- read.nex(x)
nex
ncol(ips.16S)
ncol(ips.cox1)
x <- read.table("/Users/stoffi/r/ornitho/data/Artenliste_ornitho_DE_2015_11_03.txt")
x <- read.table("/Users/stoffi/r/ornitho/data/Artenliste_ornitho_DE_2015_11_03.txt", sep = "\t")
?read.table
x <- read.table("/Users/stoffi/r/ornitho/data/Artenliste_ornitho_DE_2015_11_03.txt", sep = " ")
x <- read.table("/Users/stoffi/r/ornitho/data/Artenliste_ornitho_DE_2015_11_03.txt", sep = " ", encoding = "latin1")
x <- read.table("/Users/stoffi/r/ornitho/data/Artenliste_ornitho_DE_2015_11_03.txt", sep = " ", encoding = "Latin-1")
file <- "PolotowGrisworld2014"
bib = "biology"
bibpath <- "~/Documents/latex/bib"
if ( length(grep("[.]pdf", file)) == 0 ) file <- paste(file, "pdf", sep = ".")
cat("\nFILE:", file)
citekey <- tolower(gsub("[.]pdf$", "", file))
cat("\nCITEKEY:", citekey)
path <- "~/Documents/lit"
path <- list.files(path, pattern = paste("^", file, sep = ""),
recursive = TRUE, full.names = TRUE)
if ( length(path) > 1 ) stop("ambiguous file names")
if ( length(grep("[.]bib", bib)) == 0 ) bib <- paste(bib, "bib", sep = ".")
bib <- paste(bibpath, bib, sep = "/")
cat("\nBIBPATH:", bib)
bib <- scan(bib, what = "c", quiet = TRUE, sep = "\n")
id <- grep("@", bib)
tag <- gsub("@.+[{]|,", "", bib[id])
id <- id[which(tag %in% citekey) + (0:1)]
if ( length(id) == 0 ) stop("citekey '", citekey,
"' not in database")
bib <- bib[seq(id[1], id[2] - 1)]
bib
bib = "biology"
bibpath <- "~/Documents/latex/bib"
if ( length(grep("[.]pdf", file)) == 0 ) file <- paste(file, "pdf", sep = ".")
cat("\nFILE:", file)
citekey <- tolower(gsub("[.]pdf$", "", file))
cat("\nCITEKEY:", citekey)
path <- "~/Documents/lit"
path <- list.files(path, pattern = paste("^", file, sep = ""),
recursive = TRUE, full.names = TRUE)
if ( length(path) > 1 ) stop("ambiguous file names")
length(grep("[.]bib", bib)) == 0
bib <- paste(bib, "bib", sep = ".")
bib <- paste(bibpath, bib, sep = "/")
cat("\nBIBPATH:", bib)
bib <- scan(bib, what = "c", quiet = TRUE, sep = "\n")
id <- grep("@", bib)
tag <- gsub("@.+[{]|,", "", bib[id])
id <- id[which(tag %in% citekey) + (0:1)]
id
file <- "PolotowGriswold2014"
bib = "biology"
bibpath <- "~/Documents/latex/bib"
if ( length(grep("[.]pdf", file)) == 0 ) file <- paste(file, "pdf", sep = ".")
cat("\nFILE:", file)
citekey <- tolower(gsub("[.]pdf$", "", file))
cat("\nCITEKEY:", citekey)
path <- "~/Documents/lit"
path <- list.files(path, pattern = paste("^", file, sep = ""),
recursive = TRUE, full.names = TRUE)
if ( length(path) > 1 ) stop("ambiguous file names")
if ( length(grep("[.]bib", bib)) == 0 ) bib <- paste(bib, "bib", sep = ".")
bib <- paste(bibpath, bib, sep = "/")
cat("\nBIBPATH:", bib)
bib <- scan(bib, what = "c", quiet = TRUE, sep = "\n")
id <- grep("@", bib)
tag <- gsub("@.+[{]|,", "", bib[id])
id <- id[which(tag %in% citekey) + (0:1)]
if ( length(id) == 0 ) stop("citekey '", citekey,
"' not in database")
bib <- bib[seq(id[1], id[2] - 1)]
author <- bib[grep("Author", bib)]
author <- gsub("\\tAuthor = [{]|[}],$", "", author)
author <- tex2UTFdecimal(author)
author <- unlist(strsplit(author, " and | AND "))
author <- strsplit(author, ", ")
a <- function(x){
x <- strsplit(x, " ")
x[[1]] <- paste(x[[1]], collapse = " ") ## e.g. "von" "Mering"
x <- unlist(x)
x[-1] <- gsub("([[:alpha:]])(.*$)", "\\1.", x[-1])
x <- c(paste(x[-1], collapse = ""), x[1])
paste(x, collapse = " ")
}
author <- sapply(author, a)
author <- paste(author, collapse = ", ")
author <- gsub("[{}]", "", author) # K. {De Queiroz}
author
title <- bib[grep("Title", bib)]
title <- gsub("\\tTitle = [{]|[}],$", "", title)
title <- tex2UTFdecimal(title)
title <- gsub("[{]|[}]|\\\\textit", "", title)
library(Roxalis)
title <- bib[grep("Title", bib)]
title <- gsub("\\tTitle = [{]|[}],$", "", title)
title <- tex2UTFdecimal(title)
title <- gsub("[{]|[}]|\\\\textit", "", title)
newfile <- paste(title, "-", author)
newfile
newfile <- paste("/Volumes/KOBIO/pdf", newfile, sep = "/")
newfile
path2
path
source('~/r/pkgs/Roxalis/R/pdf2pocketbook.R')
pdf2pocketbook("PolotowGriswold2014")
library(Roxalis)
pdf2pocketbook("NielsenBeaumont2009")
pdf2pocketbook("LemeySuchard2010")
pdf2pocketbook("BielejecLemey2011")
source('~/r/pkgs/Roxalis/R/pdf2pocketbook.R')
in.files <- c("/RAxML_bipartitions.result",
"/RAxML_bootstrap.result")
sep = "")
in.files <- c("/RAxML_bipartitions.result",
"/RAxML_bootstrap.result")
in.files
dataset <- "supermatrix_393_4_4427"
in.files <- c("RAxML_bipartitions.result",
"RAxML_bootstrap.result")
out.files <- paste(dataset,
c("-bipartitions", "-bootstrap"),
"-ultrametric.tre", sep = "")
out.files
in.files
library(Roxalis)
pdf2pocketbook("SongWhiting2015")
max.bp
x@paramsmax.bp
library(megaptera)
setwd("~/r/orthoptera-bavaria/data")
load("orthoptera.megapteraProj")
load("mt.rda")
x@paramsmax.bp
x@params@max.bp
setwd("~/r/pkgs/megaptera/man")
prompt(dbReadLocus)
dbReadLocus(x)
