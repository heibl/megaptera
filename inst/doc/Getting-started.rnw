\documentclass{article}
\usepackage{color}
\definecolor{grey}{rgb}{0.3, 0.3, 0.3}
\usepackage[colorlinks, urlcolor=grey]{hyperref}
\usepackage{natbib}

%\VignetteIndexEntry{Supermatrix construction with megaptera}
%\VignetteEngine{knitr::knitr_notangle}

\title{MEGAPTERA - Mega-Phylogeny Techniques in R}
\author{Christoph Heibl}
\date{\today}

\begin{document}

<<setup, include=FALSE>>=
library(knitr)
opts_chunk$set(eval=FALSE,cache=TRUE,concordance=TRUE)
library(megaptera)
data(input)
@

\maketitle
\tableofcontents

% INTRODUCTION
\section{Introduction}
This package facilitates the automated construction of large DNA sequences datasets from internet-accessible depositories, currently the Nucleotide database on GenBank (\href{http://www.ncbi.nlm.nih.gov/nuccore}{http://www.ncbi.nlm.nih.gov/nuccore}). It uses a number of successive steps to query, download, check, sort and assemble DNA sequences. The minimum input of information required by the algorithm is the name of a DNA sequence marker (e.g.~rbcL, trnS, cytB, ...) and some taxon names. First, a taxonomic classification for the taxa of interest is retrieved from the Taxonomy database on GenBank. The taxonomy will be used for reference sequences calculation and profile alignment. In the second step, GenBank is searched for all available sequences of a marker for the given set of species. The sequences are downloaded and, if more than one accession is available per species, species alignments are build. In a fourth step, these species alignments are searched for those alignments that contain totally identical `zero-distance' sequences and a consensus sequence, hereafter termed `reference sequence', is build from the zero-distance alignments. The algorithm considers the reference sequence as some sort of `idealized' sequence of the genetic marker, to which, in a fifth step, all sequences are compared and their inclusion into the final alignment is decided upon. Knowing that there is no guarantee that all sequence information stored in the database is correct and lacking \textit{a priori} measures to tell the right from the wrong sequences, the rationale behind this process is that we might be especially confident in the correctness of a sequence, if it is shared by all conspecifics in that database and our confidence might be the greater the more sequences are available for this comparison. Next, all included sequences are aligned and the pairwise-distances of the sequences are calculated. If the maximum genetic distance exceeds a certain threshold, the alignment is iteratively broken into smaller alignment blocks until the condition of the maximum distance threshold is satisfied. The resulting blocks are cleaned and concatenated into the given marker's alignment. Several such alignments can then be concatenated into a supermatrix or analyzed separately with supertree methods.

% REQUIRED SOFTWARE
\section{Required software}
\textsc{megaptera} is exclusively written in \textsc{r} and makes extensive use of the existing capabilities of \textsc{r} to deal with phylogenetic data provided by the packages \textsc{ape}, \textsc{seqinr}, and \textsc{ips}.

For sequence alignment and for alignment masking, \textsc{megaptera} uses external software packages, which are usually much faster than pure R code, and we profit in using stable and millionfold-tested software package.
Currently, there is only one option for both tasks: sequence alignment is done with \textsc{mafft}\footnote{\href{http://align.bmr.kyushu-u.ac.jp/mafft/software/}{http://align.bmr.kyushu-u.ac.jp/mafft/software/}} \citep{katohmiyata2002,katohmiyata2005,katohstandley2013} and the masking of doubtful alignment position with \textsc{gblocks}\footnote{\href{http://molevol.cmima.csic.es/castresana/Gblocks.html}{http://molevol.cmima.csic.es/castresana/Gblocks.html}} \citep{castresana2000,talaveracastresana2007}, but further programs might be included in the future. See the respective websites for installation.

Data management relies on \textsc{postgreSQL}, a popular open relational database, for which an excellent interface with \textsc{r} is available (packages \textsc{DBI} and \textsc{RPostgreSQL}). See the \textsc{postgreSQL} website\footnote{\href{http://www.postgresql.org}{http://www.postgresql.org}} for installation and and a basic introduction to SQL. 

%% Preparing the input data
\section{Preparing the pipeline}

\textsc{megaptera} uses a relational database system to store taxonomies, sequences of different genetic markers and their interrelation. This might first seem unnecessarily complicated for users who are used to handling sequence data files in formats like NEXUS, PHYLIP, or FASTA, but the benefits are clear: A database is much easier to maintain and evolve in a consistent fashion due to the powerful standard query language (SQL). In addition, database operations are usually much quicker compared to file-based input/output, a difference that is increasingly important when it comes to build larger and larger datasets. 

Once the database system is available (\ref{subsec:database}), the minimum required information to start the pipeline is a taxonomy of the study group (\ref{subsec:taxonomy}) and a set of genetic markers (\ref{subsec:loci}), before the actual pipeline can be run (\ref{sec:pipe}).

To show how to use the \textsc{megaptera} package, we are going to construct a phylogenetic dataset of the mammal order Cetacea (whales and dolphins). With 80--90 extant species, Cetacea present an ideal group for demonstration purposes. And maybe a motivating one, as I hope that many users will share my fascination for this mysterious creatures. Last not least the monotypic genus of humpback whales served as an eponym of this package. 

%% DATABASE CREATION
\subsection{Set up the database}\label{subsec:database}

First we create a database called \texttt{cetacea} to hold all sequences together with taxonomic data; the corresponding function is \texttt{dbPars()}. In principle, you can do this and all subsequent SQL operations with PostgreSQL's genuine front-end \textsc{pgAdmin3}\footnote{\href{http://www.postgresql.org/ftp/pgadmin3/}{http://www.postgresql.org/ftp/pgadmin3/}}, but I recommend to use \textsc{megaptera}'s functions to assure the integrity of your data. Besides the name of the database (\texttt{dbname}), the drivers accepts four parameters: \texttt{host}, \texttt{port}, \texttt{user}, and (optional) \texttt{password}. With a standard installation of postgreSQL you should be fine leaving these parameters at their default values.\footnote{If you encounter any problems, have a look at \texttt{?dbConnect} and the postgreSQL documentation.}

<<create-database, eval=FALSE, tidy=FALSE>>=
library(megaptera)
conn <- dbPars(dbname = "Cetacea", password = "oxalis")
@

Note that \texttt{dbname} was coerced to lower case, because SQL is not case sensitive and the same applies to all table and attribute (column) names.

<<create-database2, eval=TRUE, tidy=FALSE>>=
show(conn)
@
%% TAXONOMY
\subsection{Taxonomic information}\label{subsec:taxonomy}

Whereas evolutionary biologists are normally interested in the phylogenetic history of a clade, community ecologists need phylogenies of the members of a community, i.e. only a subset of of a clade's phylogeny. To account for both needs, \textsc{megaptera} accepts taxonomic information as a species list or as the name of one or more (higher) taxa (e.g. Cetacea, Asteraceae, Russula). Ingroup and outgroup is given separately and we have to specify the kingdom our taxa belong to. This is neccesary to differenciate between   homonyms allowed by the taxonomic codices (e.g. \textit{Prunella} ist both a genus of birds and of plants).

<<taxonomy, eval=TRUE, size="small", tidy=FALSE>>=
tax <- taxon(ingroup = "Cetacea", 
             outgroup = c("Hippopotamus amphibius", 
                          "Sus scrofa", 
                          "Bos taurus"),
             kingdom = "Metazoa")

tax
@

%Currently, \textsc{megaptera} is designed such that is uses species (i.e., Linnean binomials) as operational taxonomic units (OTU). That means all subspecies and varieties will be pooled into one OTU, which will be represented by a single consensus sequence in the final alignment. This makes the implicit assumption that species as defined by their names at NCBI are monophyletic.  

For running the pipeline the taxonomic classification will be stored in a database table called \texttt{taxonomy}. You can create this table yourself or you can use \texttt{dbUpdateTaxonomy}, which his recommended, because the function takes care of standardizing the names of ranks and will append taxa if \texttt{taxonomy} already exists. In the case that you do not have a full taxonomy of your study group at hand, but only a species list without higher taxonomic ranks, you can use the function \texttt{ncbiTaxonomy} to retrieve the relevant information from the taxonomy database provided by NCBI. The same function is useful if you are interested in all members of a certain higher taxon. For demostration we will download the classification of the order Cetacea and store it in the database.

%% GENETIC MARKERS
\subsection{Genetic markers (loci)}\label{subsec:loci}

\textsc{megaptera} is not a super-matrix approach \emph{sensu} \citet{smithdonoghue2009}, where sequences are sorted by $N \times N$ comparisons into orthologous groups, but instead requieres the specification of genetic marker regions (here after called `loci'). Unfortunately there is no strict definition of how loci should be called (and in which fields they should be searched for, section \ref{sec:pipe}) at NCBI. The widely used large unit of ribosomal DNA, e.g., has been referred to by 28S, 26S, or 25S according to its different molecular weight in different lineages. Thus, \textsc{megaptera} offers (and you should use it) the possibility to define aliases of locus names.

% <<genes1, tidy.opts=list(width.cutoff=40)>>=
% l <- locus("large subunit ribosomal RNA gene", "28S", "26S", "25S")
% @

The order of aliases has no effect, but you might prefer a short one as the first argument is taken to derive several internally used labels for database tables and columns.

% <<genes2, tidy=TRUE, tidy.opts=list(width.cutoff=40)>>=
% l <- locus("28S", "26S", "25S", "large subunit ribosomal RNA gene")
% @

Let's choose five loci that are widely used in vertebrate phylogenetics.

<<loci, eval=TRUE, tidy=FALSE, tidy.opts=list(width.cutoff=40)>>=
loci <- list(locus("cytB", "Cytb"),
             locus("cox1", "COI"),
             locus("16S"),
             locus("RAG1"),
             locus("RAG2")
)
@


\subsection{Pipeline parameters}\label{subsec:pars}

The pipeline requires a set of parameters that can be set with \texttt{megapteraPars}; see \texttt{help("megapteraPars-class")} for a detailed description of each parameter.

<<parameters, eval=TRUE>>=
pars <- megapteraPars()
pars
@

\subsection{Collect input data}
Now we can bundle all input data in one single object of class \texttt{"megapteraProj"}. The arguments \texttt{db}, \texttt{taxon}, and \texttt{pars} are given objects of classes \texttt{"dbPars"}, \texttt{"taxon"}, and \texttt{"megapteraPars"}, respectively. Note that we leave argument \texttt{locus} undefined; this argument will be set later on (\ref{sec:pipe}). The input data will be completed by giving the paths to the alignment and masking programs .  

% "/Applications/mafft-mac/mafft.bat"
<<prepare-input, eval=TRUE, tidy=FALSE>>=
x <- megapteraProj(db = conn,
                   taxon = tax,
                   locus = locus(),
                   align.exe = "/usr/local/bin/mafft", 
                   mask.exe = "/Applications/Gblocks_0.91b")
x
@

%% RUNNING THE PIPELINE
\section{Running the pipeline}\label{sec:pipe}

Finally we are ready for running the pipeline. The eight steps of the pipeline will be run separately for each locus by looping over the list of loci defined in \ref{subsec:loci}. In each iteration, \texttt{setLocus} is used to set the \texttt{locus} argument accordingly.   

<<pipeline, eval=FALSE>>=
for ( i in loci) {
  x <- setLocus(x, i)
  stepA(x)
  stepB(x)
  stepC(x)
  stepD(x)
  stepE(x)
  stepF(x)
  stepG(x)
  stepH(x)
}
@

% \subsection{Download taxonomy (Step A)}
% 
% In step A we will download ...
% 
% <<download-taxonomy, cache=TRUE>>=
% stepA(x)
% @
% 
% \subsection{Download sequences (Step B)}
% 
% In step B we will download all available sequences from the Nucleotide repository at NCBI. These will be stored in a database table called \texttt{acc\_<locus>}, in our example \texttt{acc\_cytb}. The argument \texttt{field} controls in which NCBI search fields the algorithm will look for any of the locus aliases defined previously with \texttt{locus}; we suggest not to change this default. The argument \texttt{update} has two more options, \texttt{"all"} and \texttt{"not.yet.found"}, which sould be self-explanatory.
% 
% <<download-sequences, eval=FALSE>>=
% stepB(x)
% @
% 
% \subsection{Align conspecific sequences (Step C)}
% 
% <<align-conspecific-sequences, eval=FALSE>>=
% stepC(x)
% @
% \subsection{Construct reference sequences (Step D)}
% 
% <<reference-sequences, eval=FALSE>>=
% stepD(x)
% @
% \subsection{Sequence identity (Steps E and F)}
% 
% <<sequences-identity, eval=FALSE>>=
% stepE(x)
% stepF(x)
% @
% \subsection{Sequence alignment (Steps G and H)}
% 
% <<sequence-alignment, eval=FALSE>>=
% 
% stepG(x, nob = FALSE)
% stepH(x, clean = TRUE)
% @
% 
% \subsection{Exporting individual aligned loci} 
% 
% The aligned sequences are stored in the database table \texttt{spec\_cytb}. We can easliy import them into the currend R session setting the \texttt{ignore.excluded = TRUE}.  
% 
% <<readDNA, eval=FALSE, tidy=FALSE>>=
% conn <- dbConnect(PostgreSQL(), user = "postgres", 
%                   host = "localhost", port = 5433, 
%                   dbname = "cetacea", password = "oxalis")
% cytb <- dbReadDNA(conn, tab.name = "spec_cytb", ignore.excluded = TRUE)
% cytb
% @
% 
% We will use the alignment to
% 
% <<raxml, eval=FALSE>>=
% conn <- dbConnect(PostgreSQL(), user = "postgres", 
%                   host = "localhost", port = 5433, 
%                   dbname = "cetacea", password = "oxalis")
% 
% ## prepare vector of outgroup species
% outgroup <- dbReadTaxonomy(conn)
% outgroup <- outgroup$spec[outgroup$ord == "-"]
% outgroup <- intersect(outgroup, rownames(cytb))
% 
% tr <- raxml(cytb, f = "a", N = "autoMRE", p = 1234, x = 1234,
%             outgroup = outgroup,
%             file = "cetacea", exec = "/Applications/RAxML-8.0.3")
% @
% 
% 
% <<guide-tree, eval=FALSE, fig.height=12>>=
% conn <- dbConnect(PostgreSQL(), user = "postgres", 
%                   host = "localhost", port = 5433, 
%                   dbname = "cetacea", password = "oxalis")
% 
% tax <- dbReadTaxonomy(conn)
% gt <- fleshoutGuidetree(tr$bestTree, tax)
% plot(gt, no.margin = TRUE)
% @
% 
% \subsection{Add a second locus}
% 
% <<prepare-input-16S, eval=FALSE, tidy=FALSE>>=
% db <- sdb(host = "localhost", port = "5433", dbname = "cetacea",
%           user = "postgres", password = "oxalis")
% x <- megapteraProj(db = db,
%                    gene = locus("16S"), 
%                    gt = gt,
%                    reference.rank = "ord",
%                    align.exe = "/usr/local/bin/mafft", 
%                    #                    align.exe = "/Applications/mafft-mac/mafft.bat",
%                    gblocks.exe = "/Applications/Gblocks_0.91b")
% stepA(x, update = "not.yet.searched", field = c("title", "gene"))
% stepB(x)
% stepC(x, update = FALSE)
% stepD(x, update = FALSE)
% stepE(x, update = FALSE)
% stepF(x, update = FALSE, nob = FALSE)
% stepG(x, clean = FALSE)
% @
% 

\section{Concatenation of loci}

<<concatenation, eval=FALSE, tidy=FALSE>>=
conn <- dbConnect(PostgreSQL(), port = 5432, user = "postgres",
                  dbname = "cetacea", password = "oxalis")
o <- c("ord", "-")
s <- c("ord", "Cetacea")
check.Markers(conn, outgroup = o, subset = s)
sm <- supermatrix(conn, outgroup = o, subset = s)
dbDisconnect(conn)
sm
@

% \section{Getting help}

\renewcommand{\bibname}{References}
\renewcommand\bibsection{\section{\bibname}}
\bibliographystyle{jbiogeo2}
{\setlength{\baselineskip}{0.8\baselineskip}
\bibliography{biology}\par} 


\end{document}
